#include <iostream>
#include <vector>
#include <queue>
#include <unordered_map>
#include <string>

using namespace std;

unordered_map<string, int> shortest_path(const unordered_map<string, vector<string>>& network, const string& source) {
    unordered_map<string, int> distances;
    for (const auto& node : network) {
        distances[node.first] = -1;
    }

    priority_queue<pair<int, string>, vector<pair<int, string>>, greater<pair<int, string>>> pq;
    pq.push({0, source});

    while (!pq.empty()) {
        int current_distance = pq.top().first;
        string current_node = pq.top().second;
        pq.pop();

        if (distances[current_node] == -1) {
            distances[current_node] = current_distance;
            for (const auto& neighbor : network.at(current_node)) {
                if (distances[neighbor] == -1) {
                    pq.push({current_distance + 1, neighbor});
                }
            }
        }
    }

    return distances;
}

int main() {
    int num_nodes, num_edges;
    cin >> num_nodes >> num_edges;

    unordered_map<string, vector<string>> graph;
    for (int i = 0; i < num_edges; ++i) {
        string node1, node2;
        cin >> node1 >> node2;
        graph[node1].push_back(node2);
        graph[node2].push_back(node1);
    }

    int result = shortest_path(graph, "Entrada")["*"] + shortest_path(graph, "*")["Saida"];
    cout << result << endl;

    return 0;
}
